<figure>1</figure>
<caption>Figure 1: The text of an exercise generated by Genpex. (Left: German original, right: English translation.)</caption>
<mention10>"... to enable easy creation of new exercises meeting these requirements. Figure 1 shows a narrative probability exercise generated by Genpex. The ...  2 presents the probability problem underlying the narrative exercise of Figure 1. It specifies the context, the total number of entities ...  the first verb in an aggregated sentence. An example from Figure 1 is the sentence "70 Fahrräder sind billiger als 500 ...  of Genpex, showing a variation of the narrative exercise in Figure 1. The introductory text was taken from Zeuch (In preparation). ..."</mention10>
<mention20>"... difficulty of the exercise should be known. Genpex was designed to enable easy creation of new exercises meeting these requirements. Figure 1 shows a narrative probability exercise generated by Genpex. The text of the exercise is in German, because the target ...  first evaluation results and some pointers to future work. Figure 2 presents the probability problem underlying the narrative exercise of Figure 1. It specifies the context, the total number of entities (numEntities), and the distribution of (combinations of) attribute values over ...  and Conjunction Reduction. Gapping is the removal of all except the first verb in an aggregated sentence. An example from Figure 1 is the sentence "70 Fahrräder sind billiger als 500 Euro und 30 Fahrräder teurer als 500 Euro" (70 bicycles ...  testing. Field trials with Figure 5: Screenshot of the GUI of Genpex, showing a variation of the narrative exercise in Figure 1. The introductory text was taken from Zeuch (In preparation). students are future work, but we did carry out some ..."</mention20>
<mention50>"... A large collection of narrative exercises is needed to test the developed models in field trials. All of these narrative exercises should be different, but the properties that define the difficulty of the exercise should be known. Genpex was designed to enable easy creation of new exercises meeting these requirements. Figure 1 shows a narrative probability exercise generated by Genpex. The text of the exercise is in German, because the target group of our project are German high school students. The texts produced by Genpex are based on a set of example narrative exercises that were created earlier within the project ...  generation (NLG) module of Genpex creates a text expressing the probability problem, focusing on the creation of variation in the generated texts. We end with a brief discussion of our first evaluation results and some pointers to future work. Figure 2 presents the probability problem underlying the narrative exercise of Figure 1. It specifies the context, the total number of entities (numEntities), and the distribution of (combinations of) attribute values over the entities. Number information may be suppressed so as not to give the answer away; this is done by inserting a question mark in the place of the number (e.g., ...  Ellipsis. This is the removal of duplicate words from sentences, which typically applies to aggregated sentences (Harbusch and Kempen, 2009). Genpex can apply different types of ellipsis, such as Gapping and Conjunction Reduction. Gapping is the removal of all except the first verb in an aggregated sentence. An example from Figure 1 is the sentence "70 Fahrräder sind billiger als 500 Euro und 30 Fahrräder teurer als 500 Euro" (70 bicycles are less expensive than 500 Euros and 30 bicycles more expensive than 500 Euros), where the verb "sind" (are) has been deleted from the second clause. (Forward) Conjunction Reduction deletes ...  display in web browsers. Potential users of Genpex (researchers working on test design) have been involved at different stages of development of the system, such as requirements specification and usability testing. Field trials with Figure 5: Screenshot of the GUI of Genpex, showing a variation of the narrative exercise in Figure 1. The introductory text was taken from Zeuch (In preparation). students are future work, but we did carry out some preliminary, qualitative evaluations with a few native speakers of German (including one item generation expert) to test the grammaticality and understandability of the generated exercises. This revealed some small mistakes ..."</mention50>
<lines3> Genpex was designed to enable easy creation of new exercises meeting these requirements. Figure 1 shows a narrative probability exercise generated by Genpex. The text of the exercise is in German, because the target group of our project are German high school students. ...  We end with a brief discussion of our first evaluation results and some pointers to future work. Figure 2 presents the probability problem underlying the narrative exercise of Figure 1. 1t specifies the context, the total number of entities (numEntities), and the distribution of (combinations of) attribute values over the entities. ...  Gapping is the removal of all except the first verb in an aggregated sentence. An example from Figure 1 is the sentence "70 Fahrräder sind billiger als 500 Euro und 30 Fahrräder teurer als 500 Euro" (70 bicycles are less expensive than 500 Euros and 30 bicycles more expensive than 500 Euros), where the verb "sind" (are) has been deleted from the second clause. (Forward) Conjunction Reduction deletes the subject of subsequent clauses if it is identical to the subject of the first clause. ...  Potential users of Genpex (researchers working on test design) have been involved at different stages of development of the system, such as requirements specification and usability testing. Field trials with Figure 5: Screenshot of the GU1 of Genpex, showing a variation of the narrative exercise in Figure 1. The introductory text was taken from Zeuch (1n preparation)"</lines3>
<lines5> All of these narrative exercises should be different, but the properties that define the difficulty of the exercise should be known. Genpex was designed to enable easy creation of new exercises meeting these requirements. Figure 1 shows a narrative probability exercise generated by Genpex. The text of the exercise is in German, because the target group of our project are German high school students. The texts produced by Genpex are based on a set of example narrative exercises that were created earlier within the project (Zeuch, 1n preparation). ...  Then we explain in some detail how the natural language generation (NLG) module of Genpex creates a text expressing the probability problem, focusing on the creation of variation in the generated texts. We end with a brief discussion of our first evaluation results and some pointers to future work. Figure 2 presents the probability problem underlying the narrative exercise of Figure 1. 1t specifies the context, the total number of entities (numEntities), and the distribution of (combinations of) attribute values over the entities. Number information may be suppressed so as not to give the answer away; this is done by inserting a question mark in the place of the number (e.g., colour[green] = ?). ...  Genpex can apply different types of ellipsis, such as Gapping and Conjunction Reduction. Gapping is the removal of all except the first verb in an aggregated sentence. An example from Figure 1 is the sentence "70 Fahrräder sind billiger als 500 Euro und 30 Fahrräder teurer als 500 Euro" (70 bicycles are less expensive than 500 Euros and 30 bicycles more expensive than 500 Euros), where the verb "sind" (are) has been deleted from the second clause. (Forward) Conjunction Reduction deletes the subject of subsequent clauses if it is identical to the subject of the first clause. The following sentence is an example: "40 Fahrräder sind Mountainbikes und 50 sind Rennräder" (40 bicycles are mountain bikes and 50 are road bikes). ...  The generated texts are marked up with HTML for easy display in web browsers. Potential users of Genpex (researchers working on test design) have been involved at different stages of development of the system, such as requirements specification and usability testing. Field trials with Figure 5: Screenshot of the GU1 of Genpex, showing a variation of the narrative exercise in Figure 1. The introductory text was taken from Zeuch (1n preparation). students are future work, but we did carry out some preliminary, qualitative evaluations with a few native speakers of German (including one item generation expert) to test the grammaticality and understandability of the generated exercises"</lines5>
<snippet3> Genpex was designed to enable easy creation of new exercises meeting these requirements. Figure 1 shows a narrative probability exercise generated by Genpex. The text of the exercise is in German, because the target group of our project are German high school students.</snippet3>
<snippet5> All of these narrative exercises should be different, but the properties that define the difficulty of the exercise should be known. Genpex was designed to enable easy creation of new exercises meeting these requirements. Figure 1 shows a narrative probability exercise generated by Genpex. The text of the exercise is in German, because the target group of our project are German high school students. The texts produced by Genpex are based on a set of example narrative exercises that were created earlier within the project (Zeuch, 1n preparation).</snippet5>
<abstract>This paper presents Genpex, a system for automatic generation of narrative probability exercises. Generation of exercises in Genpex is done in two steps. First, the system creates a specification of a solvable probability problem , based on input from the user (a researcher or test developer) who selects a specific question type and a narrative context for the problem. Then, a text expressing the probability problem is generated. The user can tune the generated text by setting the values of some linguistic variation parameters. By varying the mathematical content of the exercise, its narrative context and the linguistic parameter settings, many different exercises can be produced. Here we focus on the natural language generation part of Genpex. After describing how the system works, we briefly present our first evaluation results, and discuss some aspects requiring further investigation.</abstract>
<title>Generating Varied Narrative Probability Exercises</title>
<introduction>Narrative exercises (also called word problems or story problems) are mathematical exercises embedded in a story or text. They are commonly used as test items, to assess or train a student's understanding of the underlying mathematical concepts. When solving a narrative exercise, the student is required to derive the underlying mathematical question from the story and to calculate the correct answer to this mathematical problem. This paper presents Genpex, a system for generating narrative exercises expressing probability problems. Genpex was created in the context of an international project on item generation for testing student competencies in solving probability problems. Automatic item generation is an effective way of constructing many items with controlled difficulties, based on a set of predefined task parameters (Enright et al., 2002;Deane and Sheehan, 2003;Arendasy et al., 2006;Holling et al., 2009). The goal of our item generation project is to develop a model to support optimal problem and test construction. A large collection of narrative exercises is needed to test the developed models in field trials. All of these narrative exercises should be different, but the properties that define the difficulty of the exercise should be known. Genpex was designed to enable easy creation of new exercises meeting these requirements. Figure 1 shows a narrative probability exercise generated by Genpex. The text of the exercise is in German, because the target group of our project are German high school students. The texts produced by Genpex are based on a set of example narrative exercises that were created earlier within the project (Zeuch, In preparation).A property that sets Genpex apart from other narrative exercise generation systems is that it was specifically designed to support variation in the generated exercises. Unlike other systems, it not only changes the context of the narrative exercise (e.g., instead of bikes, the example exercise could also have been about hotel rooms with different properties) but it also varies the way the texts are formulated. Most existing systems for narrative exercise generation use fixed sentence templates to express mathematical content, which means that the same content is always expressed in the same way (Fa-In einer großen Halle ist eine Mischung von Fahrrädern. In a big hall there are a variety of bicycles. Es gibt insgesamt 100 Fahrräder.There are 100 bicycles in total.</introduction>
<file>W11-1403-Figure1-1.png</file>
<figure>2</figure>
<caption>Figure 2: The probability problem underlying Figure 1.</caption>
<mention10>"... our first evaluation results and some pointers to future work. Figure 2 presents the probability problem underlying the narrative exercise of ...  exactly one entity. Probability problems such as the one in Figure 2 are automatically created by Genpex; the only thing the ..."</mention10>
<mention20>"... the generated texts. We end with a brief discussion of our first evaluation results and some pointers to future work. Figure 2 presents the probability problem underlying the narrative exercise of Figure 1. It specifies the context, the total number of ...  computed as |A∩B|/|B|. All events involve a single draw of exactly one entity. Probability problems such as the one in Figure 2 are automatically created by Genpex; the only thing the user has to do is to select one or more ..."</mention20>
<mention50>"... user. Then we explain in some detail how the natural language generation (NLG) module of Genpex creates a text expressing the probability problem, focusing on the creation of variation in the generated texts. We end with a brief discussion of our first evaluation results and some pointers to future work. Figure 2 presents the probability problem underlying the narrative exercise of Figure 1. It specifies the context, the total number of entities (numEntities), and the distribution of (combinations of) attribute values over the entities. Number information may be suppressed so as not to give the answer away; this is done by ...  can be described as "Someone randomly draws one entity with property A from a subset of entities that have property B". In this case, the  probability P (A|B) is computed as |A∩B|/|B|. All events involve a single draw of exactly one entity. Probability problems such as the one in Figure 2 are automatically created by Genpex; the only thing the user has to do is to select one or more question types (defining the difficulty of the exercise) and a context for the exercise. All available question types are of the form P(A) or P(A|B), where A (but not B) ..."</mention50>
<lines3> We end with a brief discussion of our first evaluation results and some pointers to future work. Figure 2 presents the probability problem underlying the narrative exercise of Figure 1. 1t specifies the context, the total number of entities (numEntities), and the distribution of (combinations of) attribute values over the entities. ...  All events involve a single draw of exactly one entity. Probability problems such as the one in Figure 2 are automatically created by Genpex; the only thing the user has to do is to select one or more question types (defining the difficulty of the exercise) and a context for the exercise. All available question types are of the form P(A) or P(A|B), where A (but not B) can be a complex event, i.e., involving a conjunction or disjunction of properties"</lines3>
<lines5> Then we explain in some detail how the natural language generation (NLG) module of Genpex creates a text expressing the probability problem, focusing on the creation of variation in the generated texts. We end with a brief discussion of our first evaluation results and some pointers to future work. Figure 2 presents the probability problem underlying the narrative exercise of Figure 1. 1t specifies the context, the total number of entities (numEntities), and the distribution of (combinations of) attribute values over the entities. Number information may be suppressed so as not to give the answer away; this is done by inserting a question mark in the place of the number (e.g., colour[green] = ?). ...  1n this case, the  probability P (A|B) is computed as |A∩B|/|B|. All events involve a single draw of exactly one entity. Probability problems such as the one in Figure 2 are automatically created by Genpex; the only thing the user has to do is to select one or more question types (defining the difficulty of the exercise) and a context for the exercise. All available question types are of the form P(A) or P(A|B), where A (but not B) can be a complex event, i.e., involving a conjunction or disjunction of properties. For example, Q: P(A ∧ B) asks for the probability that an entity has both property A and property B"</lines5>
<snippet3> We end with a brief discussion of our first evaluation results and some pointers to future work. Figure 2 presents the probability problem underlying the narrative exercise of Figure 1. 1t specifies the context, the total number of entities (numEntities), and the distribution of (combinations of) attribute values over the entities.</snippet3>
<snippet5> Then we explain in some detail how the natural language generation (NLG) module of Genpex creates a text expressing the probability problem, focusing on the creation of variation in the generated texts. We end with a brief discussion of our first evaluation results and some pointers to future work. Figure 2 presents the probability problem underlying the narrative exercise of Figure 1. 1t specifies the context, the total number of entities (numEntities), and the distribution of (combinations of) attribute values over the entities. Number information may be suppressed so as not to give the answer away; this is done by inserting a question mark in the place of the number (e.g., colour[green] = ?).</snippet5>
<abstract>This paper presents Genpex, a system for automatic generation of narrative probability exercises. Generation of exercises in Genpex is done in two steps. First, the system creates a specification of a solvable probability problem , based on input from the user (a researcher or test developer) who selects a specific question type and a narrative context for the problem. Then, a text expressing the probability problem is generated. The user can tune the generated text by setting the values of some linguistic variation parameters. By varying the mathematical content of the exercise, its narrative context and the linguistic parameter settings, many different exercises can be produced. Here we focus on the natural language generation part of Genpex. After describing how the system works, we briefly present our first evaluation results, and discuss some aspects requiring further investigation.</abstract>
<title>Generating Varied Narrative Probability Exercises</title>
<introduction>Narrative exercises (also called word problems or story problems) are mathematical exercises embedded in a story or text. They are commonly used as test items, to assess or train a student's understanding of the underlying mathematical concepts. When solving a narrative exercise, the student is required to derive the underlying mathematical question from the story and to calculate the correct answer to this mathematical problem. This paper presents Genpex, a system for generating narrative exercises expressing probability problems. Genpex was created in the context of an international project on item generation for testing student competencies in solving probability problems. Automatic item generation is an effective way of constructing many items with controlled difficulties, based on a set of predefined task parameters (Enright et al., 2002;Deane and Sheehan, 2003;Arendasy et al., 2006;Holling et al., 2009). The goal of our item generation project is to develop a model to support optimal problem and test construction. A large collection of narrative exercises is needed to test the developed models in field trials. All of these narrative exercises should be different, but the properties that define the difficulty of the exercise should be known. Genpex was designed to enable easy creation of new exercises meeting these requirements. Figure 1 shows a narrative probability exercise generated by Genpex. The text of the exercise is in German, because the target group of our project are German high school students. The texts produced by Genpex are based on a set of example narrative exercises that were created earlier within the project (Zeuch, In preparation).A property that sets Genpex apart from other narrative exercise generation systems is that it was specifically designed to support variation in the generated exercises. Unlike other systems, it not only changes the context of the narrative exercise (e.g., instead of bikes, the example exercise could also have been about hotel rooms with different properties) but it also varies the way the texts are formulated. Most existing systems for narrative exercise generation use fixed sentence templates to express mathematical content, which means that the same content is always expressed in the same way (Fa-In einer großen Halle ist eine Mischung von Fahrrädern. In a big hall there are a variety of bicycles. Es gibt insgesamt 100 Fahrräder.There are 100 bicycles in total.</introduction>
<file>W11-1403-Figure2-1.png</file>
<figure>3</figure>
<caption>Figure 3: The NLG module of Genpex.</caption>
<mention10>"... overview of the NLG component of Genpex is given in Figure 3. Its architecture reflects the language generation pipeline of Reiter ..."</mention10>
<mention20>"... leave the reader uncertain about the underlying mathematical exercise. An overview of the NLG component of Genpex is given in Figure 3. Its architecture reflects the language generation pipeline of Reiter and Dale (2000), with three modules: Document Planner, Microplanner and ..."</mention20>
<mention50>"... so that multiple runs will result in different texts. The generated texts should be in grammatically correct German, and they must be unambiguous: the formulation of the text should not leave the reader uncertain about the underlying mathematical exercise. An overview of the NLG component of Genpex is given in Figure 3. Its architecture reflects the language generation pipeline of Reiter and Dale (2000), with three modules: Document Planner, Microplanner and Surface Realizer. Information between the modules is exchanged in the form of a list of sentence trees, each defining the content and grammatical structure of a sentence. The Document Planner ..."</mention50>
<lines3> The generated texts should be in grammatically correct German, and they must be unambiguous: the formulation of the text should not leave the reader uncertain about the underlying mathematical exercise. An overview of the NLG component of Genpex is given in Figure 3. 1ts architecture reflects the language generation pipeline of Reiter and Dale (2000), with three modules: Document Planner, Microplanner and Surface Realizer"</lines3>
<lines5> The NLG process of Genpex has two goals: generating a correct textual representation of a given probability problem, and enabling variation, so that multiple runs will result in different texts. The generated texts should be in grammatically correct German, and they must be unambiguous: the formulation of the text should not leave the reader uncertain about the underlying mathematical exercise. An overview of the NLG component of Genpex is given in Figure 3. 1ts architecture reflects the language generation pipeline of Reiter and Dale (2000), with three modules: Document Planner, Microplanner and Surface Realizer. 1nformation between the modules is exchanged in the form of a list of sentence trees, each defining the content and grammatical structure of a sentence"</lines5>
<snippet3> The generated texts should be in grammatically correct German, and they must be unambiguous: the formulation of the text should not leave the reader uncertain about the underlying mathematical exercise. An overview of the NLG component of Genpex is given in Figure 3. 1ts architecture reflects the language generation pipeline of Reiter and Dale (2000), with three modules: Document Planner, Microplanner and Surface Realizer"</snippet3>
<snippet5> The NLG process of Genpex has two goals: generating a correct textual representation of a given probability problem, and enabling variation, so that multiple runs will result in different texts. The generated texts should be in grammatically correct German, and they must be unambiguous: the formulation of the text should not leave the reader uncertain about the underlying mathematical exercise. An overview of the NLG component of Genpex is given in Figure 3. 1ts architecture reflects the language generation pipeline of Reiter and Dale (2000), with three modules: Document Planner, Microplanner and Surface Realizer. 1nformation between the modules is exchanged in the form of a list of sentence trees, each defining the content and grammatical structure of a sentence"</snippet5>
<abstract>This paper presents Genpex, a system for automatic generation of narrative probability exercises. Generation of exercises in Genpex is done in two steps. First, the system creates a specification of a solvable probability problem , based on input from the user (a researcher or test developer) who selects a specific question type and a narrative context for the problem. Then, a text expressing the probability problem is generated. The user can tune the generated text by setting the values of some linguistic variation parameters. By varying the mathematical content of the exercise, its narrative context and the linguistic parameter settings, many different exercises can be produced. Here we focus on the natural language generation part of Genpex. After describing how the system works, we briefly present our first evaluation results, and discuss some aspects requiring further investigation.</abstract>
<title>Generating Varied Narrative Probability Exercises</title>
<introduction>Narrative exercises (also called word problems or story problems) are mathematical exercises embedded in a story or text. They are commonly used as test items, to assess or train a student's understanding of the underlying mathematical concepts. When solving a narrative exercise, the student is required to derive the underlying mathematical question from the story and to calculate the correct answer to this mathematical problem. This paper presents Genpex, a system for generating narrative exercises expressing probability problems. Genpex was created in the context of an international project on item generation for testing student competencies in solving probability problems. Automatic item generation is an effective way of constructing many items with controlled difficulties, based on a set of predefined task parameters (Enright et al., 2002;Deane and Sheehan, 2003;Arendasy et al., 2006;Holling et al., 2009). The goal of our item generation project is to develop a model to support optimal problem and test construction. A large collection of narrative exercises is needed to test the developed models in field trials. All of these narrative exercises should be different, but the properties that define the difficulty of the exercise should be known. Genpex was designed to enable easy creation of new exercises meeting these requirements. Figure 1 shows a narrative probability exercise generated by Genpex. The text of the exercise is in German, because the target group of our project are German high school students. The texts produced by Genpex are based on a set of example narrative exercises that were created earlier within the project (Zeuch, In preparation).A property that sets Genpex apart from other narrative exercise generation systems is that it was specifically designed to support variation in the generated exercises. Unlike other systems, it not only changes the context of the narrative exercise (e.g., instead of bikes, the example exercise could also have been about hotel rooms with different properties) but it also varies the way the texts are formulated. Most existing systems for narrative exercise generation use fixed sentence templates to express mathematical content, which means that the same content is always expressed in the same way (Fa-In einer großen Halle ist eine Mischung von Fahrrädern. In a big hall there are a variety of bicycles. Es gibt insgesamt 100 Fahrräder.There are 100 bicycles in total.</introduction>
<file>W11-1403-Figure3-1.png</file>
<figure>4</figure>
<caption>Figure 4: Construction of a question combining multiple templates. Translation, with brackets marking the template boundaries: “What is the probability that a bicycle [[is either black or white] given that this bicycle [is not a mountainbike]]?”</caption>
<mention10>"... an attribute value, or with one of the other templates. Figure 4 shows the construction of a sentence tree for a ...  as an alternative to the more complex formulation given in Figure 4. The comments by the native speakers suggest that in ..."</mention10>
<mention20>"... in the templates can be filled with an expression for an attribute value, or with one of the other templates. Figure 4 shows the construction of a sentence tree for a fairly complex question of type P(A ∨ B | ¬ ...  that one of those bicycles is either black or white?" as an alternative to the more complex formulation given in Figure 4. The comments by the native speakers suggest that in some cases, Genpex goes too far in its "one size ..."</mention20>
<mention50>"... The structure of the rest of the sentence tree depends on the question type. Sentence tree templates are available for all possible question types. They can be used recursively: slots in the templates can be filled with an expression for an attribute value, or with one of the other templates. Figure 4 shows the construction of a sentence tree for a fairly complex question of type P(A ∨ B | ¬ C), using multiple question templates. For questions about conditional probabilities Genpex uses the slightly formal "vorausgesetzt" (given that), because simpler phrasings are likely to be ambiguous. For example, assume we ...  questions, readability might be improved by using two sentences to express them, along the lines of "Consider the set of bicycles that are not mountain bikes. What is the probability that one of those bicycles is either black or white?" as an alternative to the more complex formulation given in Figure 4. The comments by the native speakers suggest that in some cases, Genpex goes too far in its "one size fits all" approach, and that we should try to add more flexibility to the NLG component, allowing it to make finer distinctions in the application of variation techniques to specific ..."</mention50>
<lines3> They can be used recursively: slots in the templates can be filled with an expression for an attribute value, or with one of the other templates. Figure 4 shows the construction of a sentence tree for a fairly complex question of type P(A ∨ B | ¬ C), using multiple question templates. For questions about conditional probabilities Genpex uses the slightly formal "vorausgesetzt" (given that), because simpler phrasings are likely to be ambiguous. ...  What is the probability that one of those bicycles is either black or white?" as an alternative to the more complex formulation given in Figure 4. The comments by the native speakers suggest that in some cases, Genpex goes too far in its "one size fits all" approach, and that we should try to add more flexibility to the NLG component, allowing it to make finer distinctions in the application of variation techniques to specific sentences and of question templates to specific question types"</lines3>
<lines5> Sentence tree templates are available for all possible question types. They can be used recursively: slots in the templates can be filled with an expression for an attribute value, or with one of the other templates. Figure 4 shows the construction of a sentence tree for a fairly complex question of type P(A ∨ B | ¬ C), using multiple question templates. For questions about conditional probabilities Genpex uses the slightly formal "vorausgesetzt" (given that), because simpler phrasings are likely to be ambiguous. For example, assume we want to ask the question Q: P(type[mountainbike] | colour [green]). ...  For these questions, readability might be improved by using two sentences to express them, along the lines of "Consider the set of bicycles that are not mountain bikes. What is the probability that one of those bicycles is either black or white?" as an alternative to the more complex formulation given in Figure 4. The comments by the native speakers suggest that in some cases, Genpex goes too far in its "one size fits all" approach, and that we should try to add more flexibility to the NLG component, allowing it to make finer distinctions in the application of variation techniques to specific sentences and of question templates to specific question types. The texts currently being generated by Genpex are grammatical, but our native speakers reported that some sentences had to be studied carefully before it was possible to get the information needed to solve the problem"</lines5>
<snippet3> They can be used recursively: slots in the templates can be filled with an expression for an attribute value, or with one of the other templates. Figure 4 shows the construction of a sentence tree for a fairly complex question of type P(A ∨ B | ¬ C), using multiple question templates. For questions about conditional probabilities Genpex uses the slightly formal "vorausgesetzt" (given that), because simpler phrasings are likely to be ambiguous.</snippet3>
<snippet5> Sentence tree templates are available for all possible question types. They can be used recursively: slots in the templates can be filled with an expression for an attribute value, or with one of the other templates. Figure 4 shows the construction of a sentence tree for a fairly complex question of type P(A ∨ B | ¬ C), using multiple question templates. For questions about conditional probabilities Genpex uses the slightly formal "vorausgesetzt" (given that), because simpler phrasings are likely to be ambiguous. For example, assume we want to ask the question Q: P(type[mountainbike] | colour [green]).</snippet5>
<abstract>This paper presents Genpex, a system for automatic generation of narrative probability exercises. Generation of exercises in Genpex is done in two steps. First, the system creates a specification of a solvable probability problem , based on input from the user (a researcher or test developer) who selects a specific question type and a narrative context for the problem. Then, a text expressing the probability problem is generated. The user can tune the generated text by setting the values of some linguistic variation parameters. By varying the mathematical content of the exercise, its narrative context and the linguistic parameter settings, many different exercises can be produced. Here we focus on the natural language generation part of Genpex. After describing how the system works, we briefly present our first evaluation results, and discuss some aspects requiring further investigation.</abstract>
<title>Generating Varied Narrative Probability Exercises</title>
<introduction>Narrative exercises (also called word problems or story problems) are mathematical exercises embedded in a story or text. They are commonly used as test items, to assess or train a student's understanding of the underlying mathematical concepts. When solving a narrative exercise, the student is required to derive the underlying mathematical question from the story and to calculate the correct answer to this mathematical problem. This paper presents Genpex, a system for generating narrative exercises expressing probability problems. Genpex was created in the context of an international project on item generation for testing student competencies in solving probability problems. Automatic item generation is an effective way of constructing many items with controlled difficulties, based on a set of predefined task parameters (Enright et al., 2002;Deane and Sheehan, 2003;Arendasy et al., 2006;Holling et al., 2009). The goal of our item generation project is to develop a model to support optimal problem and test construction. A large collection of narrative exercises is needed to test the developed models in field trials. All of these narrative exercises should be different, but the properties that define the difficulty of the exercise should be known. Genpex was designed to enable easy creation of new exercises meeting these requirements. Figure 1 shows a narrative probability exercise generated by Genpex. The text of the exercise is in German, because the target group of our project are German high school students. The texts produced by Genpex are based on a set of example narrative exercises that were created earlier within the project (Zeuch, In preparation).A property that sets Genpex apart from other narrative exercise generation systems is that it was specifically designed to support variation in the generated exercises. Unlike other systems, it not only changes the context of the narrative exercise (e.g., instead of bikes, the example exercise could also have been about hotel rooms with different properties) but it also varies the way the texts are formulated. Most existing systems for narrative exercise generation use fixed sentence templates to express mathematical content, which means that the same content is always expressed in the same way (Fa-In einer großen Halle ist eine Mischung von Fahrrädern. In a big hall there are a variety of bicycles. Es gibt insgesamt 100 Fahrräder.There are 100 bicycles in total.</introduction>
<file>W11-1403-Figure4-1.png</file>
<figure>5</figure>
<caption>Figure 5: Screenshot of the GUI of Genpex, showing a variation of the narrative exercise in Figure 1. The introductory text was taken from Zeuch (In preparation).</caption>
<mention10>"... certain variations are applied through sliders in the GUI; see Figure 5. The probability holds for every sentence that satisfies the ...  such as requirements specification and usability testing. Field trials with Figure 5: Screenshot of the GUI of Genpex, showing a variation ..."</mention10>
<mention20>"... During generation, the user can directly influence the probability that certain variations are applied through sliders in the GUI; see Figure 5. The probability holds for every sentence that satisfies the structural requirements of the variation technique in question, unless the ...  been involved at different stages of development of the system, such as requirements specification and usability testing. Field trials with Figure 5: Screenshot of the GUI of Genpex, showing a variation of the narrative exercise in Figure 1. The introductory text ..."</mention20>
<mention50>"... would lead to odd sentences such as "Mountainbikes sind 40 Fahrräder" (Mountainbikes are 40 bicycles). Though grammatically correct, such sentences would be hard to interpret and therefore are best avoided. During generation, the user can directly influence the probability that certain variations are applied through sliders in the GUI; see Figure 5. The probability holds for every sentence that satisfies the structural requirements of the variation technique in question, unless the technique is excluded based on the information in the context file, as explained above. After having set the variation probabilities, the user can click 'Update Text' to see the effect. ...  and the placement of paragraph boundaries. The generated texts are marked up with HTML for easy display in web browsers. Potential users of Genpex (researchers working on test design) have been involved at different stages of development of the system, such as requirements specification and usability testing. Field trials with Figure 5: Screenshot of the GUI of Genpex, showing a variation of the narrative exercise in Figure 1. The introductory text was taken from Zeuch (In preparation). students are future work, but we did carry out some preliminary, qualitative evaluations with a few native speakers of German (including one item generation ..."</mention50>
<lines3> Though grammatically correct, such sentences would be hard to interpret and therefore are best avoided. During generation, the user can directly influence the probability that certain variations are applied through sliders in the GU1; see Figure 5. The probability holds for every sentence that satisfies the structural requirements of the variation technique in question, unless the technique is excluded based on the information in the context file, as explained above. ...  Potential users of Genpex (researchers working on test design) have been involved at different stages of development of the system, such as requirements specification and usability testing. Field trials with Figure 5: Screenshot of the GU1 of Genpex, showing a variation of the narrative exercise in Figure 1. The introductory text was taken from Zeuch (1n preparation)"</lines3>
<lines5> For example, applying marked word order to a sentence expressing the 'type' attribute in the bikes context would lead to odd sentences such as "Mountainbikes sind 40 Fahrräder" (Mountainbikes are 40 bicycles). Though grammatically correct, such sentences would be hard to interpret and therefore are best avoided. During generation, the user can directly influence the probability that certain variations are applied through sliders in the GU1; see Figure 5. The probability holds for every sentence that satisfies the structural requirements of the variation technique in question, unless the technique is excluded based on the information in the context file, as explained above. After having set the variation probabilities, the user can click 'Update Text' to see the effect. ...  The generated texts are marked up with HTML for easy display in web browsers. Potential users of Genpex (researchers working on test design) have been involved at different stages of development of the system, such as requirements specification and usability testing. Field trials with Figure 5: Screenshot of the GU1 of Genpex, showing a variation of the narrative exercise in Figure 1. The introductory text was taken from Zeuch (1n preparation). students are future work, but we did carry out some preliminary, qualitative evaluations with a few native speakers of German (including one item generation expert) to test the grammaticality and understandability of the generated exercises"</lines5>
<snippet3> Though grammatically correct, such sentences would be hard to interpret and therefore are best avoided. During generation, the user can directly influence the probability that certain variations are applied through sliders in the GU1; see Figure 5. The probability holds for every sentence that satisfies the structural requirements of the variation technique in question, unless the technique is excluded based on the information in the context file, as explained above.</snippet3>
<snippet5> For example, applying marked word order to a sentence expressing the 'type' attribute in the bikes context would lead to odd sentences such as "Mountainbikes sind 40 Fahrräder" (Mountainbikes are 40 bicycles). Though grammatically correct, such sentences would be hard to interpret and therefore are best avoided. During generation, the user can directly influence the probability that certain variations are applied through sliders in the GU1; see Figure 5. The probability holds for every sentence that satisfies the structural requirements of the variation technique in question, unless the technique is excluded based on the information in the context file, as explained above. After having set the variation probabilities, the user can click 'Update Text' to see the effect.</snippet5>
<abstract>This paper presents Genpex, a system for automatic generation of narrative probability exercises. Generation of exercises in Genpex is done in two steps. First, the system creates a specification of a solvable probability problem , based on input from the user (a researcher or test developer) who selects a specific question type and a narrative context for the problem. Then, a text expressing the probability problem is generated. The user can tune the generated text by setting the values of some linguistic variation parameters. By varying the mathematical content of the exercise, its narrative context and the linguistic parameter settings, many different exercises can be produced. Here we focus on the natural language generation part of Genpex. After describing how the system works, we briefly present our first evaluation results, and discuss some aspects requiring further investigation.</abstract>
<title>Generating Varied Narrative Probability Exercises</title>
<introduction>Narrative exercises (also called word problems or story problems) are mathematical exercises embedded in a story or text. They are commonly used as test items, to assess or train a student's understanding of the underlying mathematical concepts. When solving a narrative exercise, the student is required to derive the underlying mathematical question from the story and to calculate the correct answer to this mathematical problem. This paper presents Genpex, a system for generating narrative exercises expressing probability problems. Genpex was created in the context of an international project on item generation for testing student competencies in solving probability problems. Automatic item generation is an effective way of constructing many items with controlled difficulties, based on a set of predefined task parameters (Enright et al., 2002;Deane and Sheehan, 2003;Arendasy et al., 2006;Holling et al., 2009). The goal of our item generation project is to develop a model to support optimal problem and test construction. A large collection of narrative exercises is needed to test the developed models in field trials. All of these narrative exercises should be different, but the properties that define the difficulty of the exercise should be known. Genpex was designed to enable easy creation of new exercises meeting these requirements. Figure 1 shows a narrative probability exercise generated by Genpex. The text of the exercise is in German, because the target group of our project are German high school students. The texts produced by Genpex are based on a set of example narrative exercises that were created earlier within the project (Zeuch, In preparation).A property that sets Genpex apart from other narrative exercise generation systems is that it was specifically designed to support variation in the generated exercises. Unlike other systems, it not only changes the context of the narrative exercise (e.g., instead of bikes, the example exercise could also have been about hotel rooms with different properties) but it also varies the way the texts are formulated. Most existing systems for narrative exercise generation use fixed sentence templates to express mathematical content, which means that the same content is always expressed in the same way (Fa-In einer großen Halle ist eine Mischung von Fahrrädern. In a big hall there are a variety of bicycles. Es gibt insgesamt 100 Fahrräder.There are 100 bicycles in total.</introduction>
<file>W11-1403-Figure5-1.png</file>
